Polymorphism
Polymorphism in C++ refers to the ability of different objects to respond to the same function call in different ways. It's important because it promotes code reusability and flexibility, especially in large, scalable applications.

Compile-time (static) polymorphism is achieved through:

Function overloading

Operator overloading
Example:

cpp
Copy
Edit
void print(int x) { cout << x; }
void print(double x) { cout << x; }
Runtime (dynamic) polymorphism is achieved using virtual functions and inheritance. The function to call is determined at runtime.
Example:

cpp
Copy
Edit
class Base {
public:
    virtual void show() { cout << "Base"; }
};
class Derived : public Base {
public:
    void show() override { cout << "Derived"; }
};
Base* b = new Derived();
b->show();  // Output: Derived
Difference:

Static polymorphism: Resolved at compile-time.

Dynamic polymorphism: Resolved at runtime using virtual functions.

Polymorphism is implemented through:

Function/operator overloading (compile-time)

Virtual functions and base class pointers (runtime)

Pointers in C++
Pointers are variables that store memory addresses. They allow dynamic memory handling and object manipulation.

Declaring and initializing:

cpp
Copy
Edit
int a = 5;
int* p = &a;
Accessing value:

cpp
Copy
Edit
cout << *p; // Dereferencing the pointer
Pointer arithmetic involves operations like incrementing/decrementing a pointer to navigate memory (only meaningful in arrays).

Common pitfalls:

Dereferencing null/uninitialized pointers

Memory leaks (forgetting to delete)

Dangling pointers (using after delete)

Pointers with objects:

cpp
Copy
Edit
class A {
public:
    void show() { cout << "Hello"; }
};
A* obj = new A;
obj->show();
Dynamic allocation:

cpp
Copy
Edit
MyClass* obj = new MyClass();
Accessing members:

cpp
Copy
Edit
obj->method(); // Using arrow operator
Difference:

Pointer: Can be reassigned; requires * and ->.

Reference: Must be initialized; acts as an alias.

Releasing memory:

cpp
Copy
Edit
delete obj;
this Pointer & Virtual Functions
this pointer refers to the current object inside a member function.

Use in member functions:

cpp
Copy
Edit
class A {
    int x;
public:
    void setX(int x) { this->x = x; }
};
Return current object:

cpp
Copy
Edit
A& set(int val) { this->x = val; return *this; }
Virtual functions enable runtime polymorphism, allowing derived class functions to override base class versions.

Syntax:

cpp
Copy
Edit
virtual void display();
vtable (virtual table) is an internal table used to resolve virtual functions at runtime. Each class with virtual functions has one.

Pure virtual function makes a class abstract:

cpp
Copy
Edit
virtual void draw() = 0;
Pure Virtual Functions & Abstract Classes
23. Example of a class with pure virtual functions:

cpp
Copy
Edit
class Shape {
public:
    virtual void draw() = 0; // Pure virtual function
};
24. Implications of having pure virtual functions in a class:

The class becomes abstract, meaning it cannot be instantiated directly.

All derived classes must override the pure virtual function(s) to be instantiable.

25. Polymorphism using inheritance and virtual functions:

Achieved when a base class pointer or reference is used to invoke overridden methods in derived classes, enabling dynamic dispatch.

26. Example of implementing polymorphism:

cpp
Copy
Edit
class Animal {
public:
    virtual void speak() { cout << "Animal sound\n"; }
};

class Dog : public Animal {
public:
    void speak() override { cout << "Bark\n"; }
};

void makeSound(Animal* a) {
    a->speak(); // Runtime polymorphism
}

int main() {
    Dog d;
    makeSound(&d); // Output: Bark
}
27. Late binding in polymorphism:

Also called dynamic dispatch, where the function call is resolved at runtime based on the actual object type, not the pointer type.

Enabled through virtual functions.

28. Compiler management of polymorphism:

Uses a vtable (virtual table) for each class with virtual functions.

An object has a hidden pointer to its class’s vtable.

At runtime, function calls are resolved via the vtable.

29. Abstract class:

A class with at least one pure virtual function.

Cannot be instantiated directly.

Used as a base class for other classes.

30. Abstract vs Regular classes:

Abstract: Contains pure virtual functions; can't be instantiated.

Regular: Can be instantiated and may not have any virtual functions.

31. Role of abstract methods:

Force derived classes to implement specific methods.

Provide a template for a family of classes.

32. Example of defining and using an abstract class:

cpp
Copy
Edit
class Shape {
public:
    virtual void draw() = 0; // Pure virtual
};

class Circle : public Shape {
public:
    void draw() override { cout << "Drawing Circle\n"; }
};
33. Benefits of abstract classes:

Code reuse via inheritance

Enforces interface consistency across derived classes

Supports polymorphism

Exception Handling in C++
34. What is exception handling?

A mechanism to handle runtime errors gracefully, allowing separation of error handling from regular logic.

35. Syntax for throwing and catching exceptions:

cpp
Copy
Edit
try {
    throw "Error occurred";
} catch (const char* e) {
    cout << e;
}
36. try, catch, throw blocks:

try: Block where exceptions might occur.

throw: Used to throw an exception.

catch: Handles the exception.

37. Role of catch:

Defines how to respond to specific exception types.

Can have multiple catch blocks for different types.

38. Example: Handling multiple exceptions

cpp
Copy
Edit
try {
    int x = 0;
    if (x == 0) throw runtime_error("Division by zero");
} catch (const runtime_error& e) {
    cout << "Runtime error: " << e.what();
} catch (...) {
    cout << "Some other error";
}
39. How throw works:

Transfers control from the throw point to the first matching catch block.

Can throw any type (built-in or user-defined).

40. Purpose of a finally block in C++:

C++ doesn’t have a finally block like Java.

Similar functionality is achieved using:

Destructors

try-with-RAII (Resource Acquisition Is Initialization)
Custom Exception Classes
41. How do you create custom exception classes in C++?

Derive a class from the standard exception class (std::exception).

Override the what() method to return a custom error message.

Example:

cpp
Copy
Edit
#include <iostream>
#include <exception>
using namespace std;

class MyException : public exception {
public:
    const char* what() const noexcept override {
        return "Custom exception occurred";
    }
};

int main() {
    try {
        throw MyException();
    } catch (const MyException& e) {
        cout << e.what() << endl;
    }
    return 0;
}
Templates in C++
42. What are templates and why are they useful?

Templates allow writing generic and type-independent code.

They enable functions and classes to operate with any data type without rewriting code.

Function Templates
43. Syntax for defining a function template:

cpp
Copy
Edit
template <typename T>
T add(T a, T b) {
    return a + b;
}
44. Example of a function template:

cpp
Copy
Edit
#include <iostream>
using namespace std;

template <typename T>
T multiply(T a, T b) {
    return a * b;
}

int main() {
    cout << multiply(2, 3) << endl;        // int
    cout << multiply(2.5, 4.0) << endl;    // double
    return 0;
}
Class Templates
45. What is a class template and how is it different?

A class template defines a class with generic types.

Unlike function templates, class templates allow defining entire generic data structures or containers.

46. Syntax for defining a class template:

cpp
Copy
Edit
template <class T>
class Box {
    T value;
public:
    void set(T val) { value = val; }
    T get() { return value; }
};
47. Example of a class template implementing a generic stack:

cpp
Copy
Edit
template <typename T>
class Stack {
    T arr[100];
    int top = -1;
public:
    void push(T val) { arr[++top] = val; }
    T pop() { return arr[top--]; }
    bool isEmpty() { return top == -1; }
};
48. Instantiating a template class:

cpp
Copy
Edit
Stack<int> intStack;
intStack.push(10);

Stack<string> stringStack;
stringStack.push("Hello");
Advantages and Reusability
49. Advantages of templates over inheritance:

Type independence: Work with any data type.

No runtime overhead: Type resolution occurs at compile time.

Avoids the need for base classes or virtual functions for generic code.

50. How templates promote code reusability:

One template can handle multiple types, reducing code duplication.

Encourages DRY (Don't Repeat Yourself) principles.

Used extensively in the STL (Standard Template Library) — e.g., vector<T>, map<K, V>.
